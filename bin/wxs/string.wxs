// prettier-ignore
var type = require("./type.wxs");

// 前后去空格
// prettier-ignore
var trim = function (str,  patternStr, replaceStr) {
    if (typeof str === 'string') {
        // 空值时候给默认值
        if (!type.isStr(patternStr) || patternStr.replace(getRegExp('s+'), '') === '') {
			patternStr = '\s';
        }
        // 默认替换为空
        if (!replaceStr) {
            replaceStr = '';
        }
        return str.replace(getRegExp('^(' + patternStr + ')*(.*?)(' + patternStr + ')*$'), function (_, s1, s2, s3) {
            var returnStr = '';
            if (patternStr === s1) {
                returnStr += replaceStr;
            }
            returnStr += s2;
            if (patternStr === s3) {
                returnStr += replaceStr;
            }
            return returnStr;
        });
    } else {
        return str;
    }
};

// 转大写
var toUpperCase = function (str) {
    if (type.isStr(str)) {
        return str.toUpperCase();
    } else {
        return str;
    }
};

// 首字母大写
var firstUpperCase = function (str) {
    if (type.isStr(str)) {
        return (str[0] || '').toUpperCase() + str.slice(1);
    } else {
        return str;
    }
};

// 首字母小写
var firstLowerCase = function (str) {
    if (type.isStr(str)) {
        return (str[0] || '').toLowerCase() + str.slice(1);
    } else {
        return str;
    }
};

// 转小写
var toLowerCase = function (str) {
    if (type.isStr(str)) {
        return str.toLowerCase();
    } else {
        return str;
    }
};

/**
 * 转字符串
 * @param obj
 * @returns
 */
var toString = function (obj) {
    if (type.isStr(obj)) {
        return obj;
    } else {
        return JSON.stringify(obj);
    }
};

/**
 * 多个参数连接
 * @returns 字符串
 */
var concat = function () {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
        var item = arguments[i];
        if (!type.isUndefined(item)) {
            args.push(item);
        }
    }
    return args.join('');
};

module.exports = {
    trim: trim,
    toUpperCase: toUpperCase,
    firstUpperCase: firstUpperCase,
    firstLowerCase: firstLowerCase,
    toLowerCase: toLowerCase,
    toString: toString,
    concat: concat
};
